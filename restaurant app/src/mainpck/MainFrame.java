/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainpck;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;

/**
 *
 * @author vaio
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    private JMenuBar menuBar;
    private JMenu mnUser, mnProduct,mnLogo,mnUserPict,mnUserName, mnCategory;
    private JMenuItem mnitmNewUser, mnitmLoginUser, mnitmHistoryUser, mnitmCreateProduct, mnitmRemoveProduct, mnitmCreateCategory, mnitmRemoveCategory, mnitmDisableCategory, mnitmDisableProduct, mnitmRemoveUser, mnitmRemoveOrder, mnitmListOrders;

    /**
     * Displays the info of the top bar of the aplication
     *
     * @param username
     * @param userPict
     * @param isSuperUser
     * @param isLoggedUser
     */
        public void displayMenuBar(String username, String userPict, boolean isSuperUser, boolean isLoggedUser){

        int menuItemWidth=85;
        int menuItemHeight = 30;
        this.menuBar = new JMenuBar();
        
        //displays the logo of the enterprise at the top left position
        ImageIcon image = this.loadImage("img/imagepackage/logo/minilogo_small.png",menuItemWidth, menuItemHeight);
        if(image  != null){
            this.mnLogo = new JMenu("");
            this.mnLogo.setIcon(image);
            this.mnLogo.setPreferredSize(new Dimension(menuItemWidth, menuItemHeight));
            this.menuBar.add(this.mnLogo);
            
            this.mnLogo.addMenuListener(new MenuListener(){  
                public void menuSelected(MenuEvent me) {
                    logoutUser();
                }
                public void menuDeselected(MenuEvent me) {}
                public void menuCanceled(MenuEvent me) {}

            });
        }
        
        this.displayMnUser(menuItemWidth, menuItemHeight, isLoggedUser, isSuperUser);  
        if(isSuperUser){
            this.displayMnCategory(menuItemWidth, menuItemHeight);
            this.displayMnProduct(menuItemWidth, menuItemHeight);
        }
        
        //in both previous cases we display the user logged picture and name (if the isn't we show the deafults values)
        this.displayUserInfo(userPict, menuItemHeight, username, menuItemWidth);
        
        this.setJMenuBar(this.menuBar);

    }

    /**
     * displays at the top right bar position the info of the user, if we don't have logged user we use 
     * the default user information if we click in the user image or user name the aplication 
     * makes logout of the logged user
     *
     * @param userPict
     * @param menuItemHeight
     * @param username
     * @param menuItemWidth
     */
    private void displayUserInfo(String userPict, int menuItemHeight, String username, int menuItemWidth) {
        ImageIcon image;
        image = loadImage(userPict,40, menuItemHeight);
        if(image == null)
            image = loadImage("img/imagepackage/various/no_user.png",40, menuItemHeight);
        
        this.mnUserPict = new JMenu("");
        this.mnUserPict.setIcon(image);
        this.mnUserPict.setPreferredSize(new Dimension(40, menuItemHeight));
        this.menuBar.add(Box.createHorizontalGlue());
        this.menuBar.add(this.mnUserPict);

        this.mnUserName = new JMenu(username);
        this.mnUserName.setPreferredSize(new Dimension(menuItemWidth+60, menuItemHeight));

        this.mnUserPict.addMenuListener(new MenuListener(){  
            public void menuSelected(MenuEvent me) {
                logoutUser();
            }
            public void menuDeselected(MenuEvent me) {}
            public void menuCanceled(MenuEvent me) {}

        });

        this.mnUserName.addMenuListener(new MenuListener(){  
            public void menuSelected(MenuEvent me) {
                logoutUser();
            }
            public void menuDeselected(MenuEvent me) {}
            public void menuCanceled(MenuEvent me) {}

        });

        this.menuBar.add(this.mnUserName);
        
    }
    
    /**
     * Logout user
     */
    private void logoutUser(){
        MainActions ma = MainActions.getInstance();
        ma.logOutUser();
    }

    /**
     * this menu appears just in case the user logged is the superuser, this menu enables the option of create
     * disable or remove a product
     *
     * @param menuItemWidth
     * @param menuItemHeight
     */
    private void displayMnProduct(int menuItemWidth, int menuItemHeight) {
        this.mnProduct = new JMenu("Producto");
        this.mnProduct.setVisible(true);
        this.mnProduct.setPreferredSize(new Dimension(menuItemWidth, menuItemHeight));
        this.mnProduct.setEnabled(true);
        this.mnitmCreateProduct = new JMenuItem("Crear producto");
        this.mnitmRemoveProduct = new JMenuItem("Quitar producto");
        this.mnitmDisableProduct = new JMenuItem("Deshabilitar producto");
        this.mnProduct.add(this.mnitmCreateProduct);
        this.mnProduct.add(this.mnitmRemoveProduct);
        this.mnProduct.add(this.mnitmDisableProduct);
        
        this.mnitmCreateProduct.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickProductMenu(1);
                }
        });
        
        this.mnitmRemoveProduct.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickProductMenu(2);
                }
        });
        
        this.mnitmDisableProduct.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickProductMenu(3);
                }
        });
        
        this.menuBar.add(this.mnProduct);
    }
    
    /**
     * this menus appears just in case the user logged is the superuser, this menu enables the option of 
     * create disable or remove a category
     *
     * @param menuItemWidth
     * @param menuItemHeight
     */
    private void displayMnCategory(int menuItemWidth, int menuItemHeight) {
        this.mnCategory = new JMenu("Categoría");
        this.mnCategory.setVisible(true);
        this.mnCategory.setPreferredSize(new Dimension(menuItemWidth, menuItemHeight));
        this.mnCategory.setEnabled(true);
        this.mnitmCreateCategory = new JMenuItem("Añadir categoría");
        this.mnitmRemoveCategory = new JMenuItem("Quitar categoría");
        this.mnitmDisableCategory = new JMenuItem("Deshabilitar categoría");
        this.mnCategory.add(this.mnitmCreateCategory);
        this.mnCategory.add(this.mnitmRemoveCategory);
        this.mnCategory.add(this.mnitmDisableCategory);
        
        
        this.mnitmCreateCategory.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickCategoryMenu(1);
                }
        });
        
        this.mnitmRemoveCategory.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickCategoryMenu(2);
                }
        });
        
        this.mnitmDisableCategory.addActionListener(new ActionListener(){  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickCategoryMenu(3);
                }
        });
        
        this.menuBar.add(this.mnCategory);
    }

    /**
     * displays the user menu, if there is a logged user it enables the posibility of viewing the history of the 
     * previous orders, if there is not logged user the menu enables the login or register options
     * if the logged user is the super user it enables the options of list all the orders, remove an order or
     * remove an user
     *
     * @param menuItemWidth
     * @param menuItemHeight
     * @param isSuperUser
     * @param isLoggedUser
     */
    private void displayMnUser(int menuItemWidth, int menuItemHeight, boolean isLoggedUser, boolean isSuperUser) {
        this.mnUser = new JMenu("Usuario");
        this.mnUser.setPreferredSize(new Dimension(menuItemWidth, menuItemHeight));
        
        if(isSuperUser)
            this.addSuperUserMenuItems();
        else
            this.addUserMenuItems(isLoggedUser);      
        
        this.menuBar.add(this.mnUser);
    }
    
    /**
     * Add the superuser menu to the top menu bar
     */
    private void addSuperUserMenuItems(){
        this.mnitmRemoveUser = new JMenuItem("Eliminar usuario"); 
        this.mnitmRemoveOrder = new JMenuItem("Eliminar orden");
        this.mnitmListOrders = new JMenuItem("Obtener ordenes por dia");
        
        this.mnitmRemoveUser.setEnabled(true);
        this.mnitmRemoveOrder.setEnabled(true);
        this.mnitmListOrders.setEnabled(true);
        
        this.mnUser.add(this.mnitmRemoveUser);
        
        this.mnitmRemoveUser.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickUserMenu(4);
            }
        });
        
        
        this.mnUser.add(this.mnitmRemoveOrder);
        
        this.mnitmRemoveOrder.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickUserMenu(5);
            }
        });
        
        
        this.mnUser.add(this.mnitmListOrders);
        
        this.mnitmListOrders.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                
                MainActions ma = MainActions.getInstance();
                ma.clickUserMenu(6);
            }
        });
    }
        
    /**
     * this functions displays the not superuser options, displays 3 buttons and if there is or not a 
     * logged user enables one or another menuItem (if we are logged enable just the historical if not the 
     * login/register option)
     *
     * @param isLoggedUser
     */
    private void addUserMenuItems(boolean isLoggedUser){
        this.mnitmNewUser = new JMenuItem("Alta usuario");
        this.mnitmLoginUser = new JMenuItem("Acceso usuario");
        this.mnitmHistoryUser = new JMenuItem("Historial de Usuario");
        
        if(isLoggedUser){
            this.mnitmLoginUser.setEnabled(false);
            this.mnitmNewUser.setEnabled(false);
        }else{
            this.mnitmHistoryUser.setEnabled(false);
        }
        
        this.mnUser.add(this.mnitmNewUser);
        
        this.mnitmNewUser.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickUserMenu(2);
            }
        });
        
        
        this.mnUser.add(this.mnitmLoginUser);
        
        this.mnitmLoginUser.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                    MainActions ma = MainActions.getInstance();
                    ma.clickUserMenu(1);
            }
        });
        
        
        this.mnUser.add(this.mnitmHistoryUser);
        
        this.mnitmHistoryUser.addActionListener(new ActionListener()
            {  
                public void actionPerformed(ActionEvent e){  
                
                MainActions ma = MainActions.getInstance();
                ma.clickUserMenu(3);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Adds a image in a ImageIcon
     *
     * @param pathImage
     * @param imageWidth
     * @param imageHeight
     * @return ImageIcon
     */
    private ImageIcon loadImage(String pathImage,int imageWidth, int imageHeight) {
        try {
            BufferedImage img = ImageIO.read(new File(pathImage));
            if(img == null){
                System.out.println("Error al cargar imagen "+pathImage);
                return null;
            }
            Image dimg = img.getScaledInstance(imageWidth, imageHeight, Image.SCALE_SMOOTH);
            ImageIcon image = new ImageIcon(dimg);
            return image;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }       
    }
}
